using Bogus;
using Company.Product.Domain.Entities;
using Company.Product.Domain.ValueObjects;

namespace Company.Product.Infrastructure.Tests.Integration.Services.Mock;

public static class RequestOrderGenerator
{
    public static RequestOrder CreateMockOrder()
    {
        // Faker für die gesamten Order-Daten
        var orderFaker = new Faker<RequestOrder>()
            // Einfache Eigenschaften
            .RuleFor(o => o.OrderNumber, f => f.Random.Int(1000, 99999))
            .RuleFor(o => o.OrderDate, f => f.Date.Past().ToString("yyyy-MM-dd"))
            .RuleFor(o => o.Currency, f => f.Finance.Currency().Code)
            .RuleFor(o => o.Tax, f => f.Random.Int(0, 25))
            .RuleFor(o => o.PartnerId, f => f.Random.Int(1, 100))
            .RuleFor(o => o.PaymentTypeId, f => f.Random.Int(1, 5))
            .RuleFor(o => o.PaymentTypeDetail, f => f.PickRandom(new[] { "Credit Card", "PayPal", "Bank Transfer", "Invoice" }))
            .RuleFor(o => o.PaymentProviderSum, f => f.Finance.Amount(50))
            .RuleFor(o => o.TransactionId, f => f.Random.Guid().ToString())
            .RuleFor(o => o.CreditCardToken, f => f.Random.AlphaNumeric(16))
            .RuleFor(o => o.CreditCardNumber, f => f.Finance.CreditCardNumber())
            .RuleFor(o => o.CreditCardHolder, f => f.Name.FullName())
            .RuleFor(o => o.CreditCardExpire, f => f.Date.Future().ToString("MM/yy"))
            .RuleFor(o => o.BoniScore, f => f.Random.Int(0, 100))
            .RuleFor(o => o.ScoreDate, f => f.Date.Past().ToString("yyyy-MM-dd"))
            .RuleFor(o => o.ScoreText, f => f.Lorem.Sentence(5))
            .RuleFor(o => o.Filiale, _ => 800)
            .RuleFor(o => o.Subshop, _ => 115)
            .RuleFor(o => o.DubletteDifferentEmail, f => f.Random.Int(0, 1))

            // Faker für komplexe verschachtelte Objekte
            .RuleFor(o => o.Customer, _ => new Faker<Customer>()
                .RuleFor(c => c.CustomerNumber, f => f.Random.Int(1000, 9999))
                .RuleFor(c => c.Salutation, f => f.PickRandom(new[] { "Mr.", "Ms.", "Dr." }))
                .RuleFor(c => c.Title, f => f.Name.JobTitle())
                .RuleFor(c => c.Firstname, f => f.Name.FirstName())
                .RuleFor(c => c.Lastname, f => f.Name.LastName())
                .RuleFor(c => c.Email, f => f.Internet.Email())
                .RuleFor(c => c.Phone, f => f.Phone.PhoneNumber())
                .RuleFor(c => c.Birthday, f => f.Date.Past(30).ToString("yyyy-MM-dd"))
                .RuleFor(c => c.Guest, f => f.Random.Int(0, 1))
                .Generate()
            )
            .RuleFor(o => o.InvoiceAddress, f => new Faker<InvoiceAddress>()
                .RuleFor(a => a.Street, _ => f.Address.StreetAddress())
                .RuleFor(a => a.HouseNumber, _ => f.Address.BuildingNumber())
                .RuleFor(a => a.Company, _ => f.Company.CompanyName())
                .RuleFor(a => a.Additional, _ => f.Address.SecondaryAddress())
                .RuleFor(a => a.Zip, _ => f.Address.ZipCode())
                .RuleFor(a => a.City, _ => f.Address.City())
                .RuleFor(a => a.CountryName, _ => f.Address.Country())
                .RuleFor(a => a.CountryNumeric, _ => f.Random.Int(1, 999))
                .Generate()
            )
            .RuleFor(o => o.DeliveryAddress, f => new Faker<DeliveryAddress>()
                .RuleFor(a => a.Firstname, _ => f.Name.FirstName())
                .RuleFor(a => a.Lastname, _ => f.Name.LastName())
                .RuleFor(a => a.Packstation, _ => f.Random.Bool() ? "Packstation" : null)
                .RuleFor(a => a.PackstationNumber, _ => f.Random.Int(100, 999).ToString())
                .RuleFor(a => a.PostNumber, _ => f.Random.AlphaNumeric(10))
                .RuleFor(a => a.Street, _ => f.Address.StreetAddress())
                .RuleFor(a => a.HouseNumber, _ => f.Address.BuildingNumber())
                .RuleFor(a => a.Company, _ => f.Company.CompanyName())
                .RuleFor(a => a.Additional, _ => f.Address.SecondaryAddress())
                .RuleFor(a => a.Zip, _ => f.Address.ZipCode())
                .RuleFor(a => a.City, _ => f.Address.City())
                .RuleFor(a => a.CountryNumeric, _ => f.Random.Int(1, 999))
                .RuleFor(a => a.CountryName, _ => f.Address.Country())
                .RuleFor(a => a.Store, _ => f.Random.Int(1, 100))
                .Generate()
            )
            .RuleFor(o => o.ShoppingCart, f => new Faker<ShoppingCartItem>()
                    .RuleFor(i => i.Pos, _ => f.Random.Int(1, 10))
                    .RuleFor(i => i.VariantName, _ => f.Commerce.ProductName())
                    .RuleFor(i => i.UnitReference, _ => f.Random.Int(1000, 5000))
                    .RuleFor(i => i.UnitPrice, _ => f.Finance.Amount(10, 200))
                    .RuleFor(i => i.UnitSalePrice, _ => f.Random.Decimal(5, 100))
                    .RuleFor(i => i.UnitRetailPrice, _ => f.Random.Decimal(10, 250))
                    .RuleFor(i => i.UnitDiscount, _ => f.Random.Int(0, 50))
                    .RuleFor(i => i.UnitDiscountReason, _ => f.Random.Int(1, 5))
                    .RuleFor(i => i.UnitAmount, _ => f.Random.Int(1, 10))
                    .RuleFor(i => i.ArticleBrandName, _ => f.Company.CompanyName())
                    .Generate(3) // 3 Artikel generieren
            )
            .RuleFor(o => o.ShippingType, f => new Faker<ShippingType>()
                .RuleFor(s => s.Id, _ => f.Random.Guid().ToString())
                .RuleFor(s => s.Description, _ => f.Commerce.ProductMaterial())
                .RuleFor(s => s.Price, _ => f.Random.Decimal(10, 50))
                .RuleFor(s => s.Tax, _ => f.Commerce.Price(1, 20))
                .Generate()
            )
            .RuleFor(o => o.ShippingData, f => new Faker<ShippingData>()
                .RuleFor(s => s.KepNumber, _ => f.Random.AlphaNumeric(12))
                .RuleFor(s => s.KepEmail, _ => f.Internet.Email())
                .RuleFor(s => s.Wishtime, _ => f.Date.Future().ToString("HH:mm"))
                .Generate()
            );

        return orderFaker.Generate();
    }
}